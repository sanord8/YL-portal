generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
  binaryTargets   = ["native", "windows"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, uuid_ossp(map: "uuid-ossp")]
}

model User {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String            @unique
  name                 String
  passwordHash         String            @map("password_hash")
  emailVerified        Boolean           @default(false) @map("email_verified")
  emailVerifyToken     String?           @unique @map("email_verify_token")
  emailVerifyExpires   DateTime?         @map("email_verify_expires")
  passwordResetToken   String?           @unique @map("password_reset_token")
  passwordResetExpires DateTime?         @map("password_reset_expires")
  twoFactorEnabled     Boolean           @default(false) @map("two_factor_enabled")
  twoFactorSecret      String?           @map("two_factor_secret")
  isAdmin              Boolean           @default(false) @map("is_admin")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  deletedAt            DateTime?         @map("deleted_at")
  auditLogs            AuditLog[]
  personalDepartments  Department[]      @relation("PersonalDepartment")
  movementHistory      MovementHistory[]
  approvedMovements    Movement[]        @relation("MovementApprover")
  rejectedMovements    Movement[]        @relation("MovementRejector")
  movements            Movement[]        @relation("MovementCreator")
  sessions             Session[]
  userAreas            UserArea[]

  @@index([email])
  @@index([deletedAt])
  @@index([emailVerifyToken])
  @@index([passwordResetToken])
  @@map("users")
}

model Session {
  id         String   @id
  userId     String   @map("user_id") @db.Uuid
  expiresAt  DateTime @map("expires_at")
  rememberMe Boolean  @default(false) @map("remember_me")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model BankAccount {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  accountNumber        String?
  bankName             String?
  currency             String     @default("EUR") @db.VarChar(3)
  description          String?
  createdAt            DateTime   @default(now()) @map("created_at")
  updatedAt            DateTime   @updatedAt @map("updated_at")
  deletedAt            DateTime?  @map("deleted_at")
  areas                Area[]
  destinationMovements Movement[] @relation("MovementDestinationAccount")
  sourceMovements      Movement[] @relation("MovementSourceAccount")

  @@index([deletedAt])
  @@map("bank_accounts")
}

model Area {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bankAccountId String?      @map("bank_account_id") @db.Uuid
  name          String
  code          String       @unique
  description   String?
  currency      String       @default("EUR") @db.VarChar(3)
  budget        Int?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  deletedAt     DateTime?    @map("deleted_at")
  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  departments   Department[]
  movements     Movement[]
  userAreas     UserArea[]

  @@index([bankAccountId])
  @@index([code])
  @@index([deletedAt])
  @@map("areas")
}

model Department {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  areaId      String     @map("area_id") @db.Uuid
  userId      String?    @map("user_id") @db.Uuid
  name        String
  code        String
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deletedAt   DateTime?  @map("deleted_at")
  area        Area       @relation(fields: [areaId], references: [id], onDelete: Cascade)
  user        User?      @relation("PersonalDepartment", fields: [userId], references: [id], onDelete: Cascade)
  movements   Movement[]

  @@unique([areaId, code])
  @@index([areaId])
  @@index([userId])
  @@map("departments")
}

model Role {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  permissions RolePermission[]
  userAreas   UserArea[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource    String
  action      String
  description String?
  createdAt   DateTime         @default(now()) @map("created_at")
  roles       RolePermission[]

  @@unique([resource, action])
  @@index([resource])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId       String     @map("role_id") @db.Uuid
  permissionId String     @map("permission_id") @db.Uuid
  conditions   Json?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model UserArea {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  areaId    String   @map("area_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  areaRole  AreaRole @default(MANAGER) @map("area_role")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  area      Area     @relation(fields: [areaId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, areaId])
  @@index([userId])
  @@index([areaId])
  @@map("user_areas")
}

model Movement {
  id                       String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sourceBankAccountId      String            @map("source_bank_account_id") @db.Uuid
  destinationBankAccountId String?           @map("destination_bank_account_id") @db.Uuid
  areaId                   String            @map("area_id") @db.Uuid
  departmentId             String?           @map("department_id") @db.Uuid
  userId                   String            @map("user_id") @db.Uuid
  type                     MovementType
  status                   MovementStatus    @default(DRAFT)
  amount                   Int
  currency                 String            @default("EUR") @db.VarChar(3)
  description              String
  category                 String?
  reference                String?
  approvedBy               String?           @map("approved_by") @db.Uuid
  approvedAt               DateTime?         @map("approved_at")
  rejectedBy               String?           @map("rejected_by") @db.Uuid
  rejectedAt               DateTime?         @map("rejected_at")
  rejectionReason          String?           @map("rejection_reason")
  parentId                 String?           @map("parent_id") @db.Uuid
  isSplitParent            Boolean           @default(false) @map("is_split_parent")
  isInternalTransfer       Boolean           @default(false) @map("is_internal_transfer")
  transactionDate          DateTime          @map("transaction_date")
  createdAt                DateTime          @default(now()) @map("created_at")
  updatedAt                DateTime          @updatedAt @map("updated_at")
  deletedAt                DateTime?         @map("deleted_at")
  idempotencyKey           String?           @unique @map("idempotency_key")
  attachments              Attachment[]
  history                  MovementHistory[]
  approver                 User?             @relation("MovementApprover", fields: [approvedBy], references: [id])
  area                     Area              @relation(fields: [areaId], references: [id])
  department               Department?       @relation(fields: [departmentId], references: [id])
  destinationBankAccount   BankAccount?      @relation("MovementDestinationAccount", fields: [destinationBankAccountId], references: [id])
  parent                   Movement?         @relation("MovementSplit", fields: [parentId], references: [id])
  children                 Movement[]        @relation("MovementSplit")
  rejector                 User?             @relation("MovementRejector", fields: [rejectedBy], references: [id])
  sourceBankAccount        BankAccount       @relation("MovementSourceAccount", fields: [sourceBankAccountId], references: [id])
  user                     User              @relation("MovementCreator", fields: [userId], references: [id])

  @@index([transactionDate])
  @@index([sourceBankAccountId])
  @@index([destinationBankAccountId])
  @@index([areaId, transactionDate])
  @@index([userId])
  @@index([departmentId])
  @@index([type])
  @@index([status])
  @@index([isInternalTransfer])
  @@index([isSplitParent])
  @@index([parentId])
  @@index([deletedAt])
  @@map("movements")
}

model Attachment {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movementId    String   @map("movement_id") @db.Uuid
  filename      String
  mimeType      String   @map("mime_type")
  size          Int
  fileData      Bytes    @map("file_data")
  thumbnailData Bytes?   @map("thumbnail_data")
  createdAt     DateTime @default(now()) @map("created_at")
  movement      Movement @relation(fields: [movementId], references: [id], onDelete: Cascade)

  @@index([movementId])
  @@map("attachments")
}

model MovementHistory {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movementId String        @map("movement_id") @db.Uuid
  userId     String        @map("user_id") @db.Uuid
  action     HistoryAction
  comment    String?
  metadata   Json?         // Stores before/after values for changes (e.g., department/area changes)
  createdAt  DateTime      @default(now()) @map("created_at")
  movement   Movement      @relation(fields: [movementId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id])

  @@index([movementId])
  @@index([userId])
  @@index([createdAt])
  @@map("movement_history")
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  action     String
  resource   String
  resourceId String   @map("resource_id") @db.Uuid
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([resource, resourceId])
  @@index([createdAt])
  @@map("audit_logs")
}

enum AreaRole {
  VIEWER
  MANAGER
  ADMIN

  @@map("area_role")
}

enum MovementType {
  INCOME
  EXPENSE
  TRANSFER
  DISTRIBUTION

  @@map("movement_type")
}

enum MovementStatus {
  DRAFT
  APPROVED
  CANCELLED

  @@map("movement_status")
}

enum HistoryAction {
  APPROVED
  REJECTED
  COMMENT
  EDITED
  CATEGORIZED
  SPLIT
  FINALIZED

  @@map("history_action")
}
